import { expect, test } from '@playwright/test'
let accountName: any = "Account" + Math.floor((Math.random() * 10000) + 1)

test.describe('Sales Force Application Cases', () => {
    test.slow()
    test('TC001 - Login into Sales Force Application', async ({ page }) => {
        await page.goto('https://login.salesforce.com/')
        await page.locator('input#username').fill('arung@testleaf.com')
        await page.locator('input#password').fill('Testing@1918')
        await page.locator('input#Login').click({ force: true })
        await page.waitForTimeout(5000)
        await expect(page.locator('button[class$="salesforceIdentityAppLauncherHeader"]'), "Verify the user is logged in successfully!").toBeVisible({ timeout: 50000 })
        await page.context().storageState({ 'path': 'tests/Week4/files/salesforce_state.json' })
    })

    test.describe('Sales Force Campaign Related cases', () => {
        test.use({ 'storageState': 'tests/Week4/files/salesforce_state.json' })
        test('TC002 - Create a new Campaign in Sales Force Application', async ({ page }) => {
            //Click on App Launcher and create a New Campaign
            page.goto('https://tata-a5-dev-ed.develop.lightning.force.com/lightning/setup/SetupOneHome/home')
            await page.waitForTimeout(3000)
            await expect(page.locator('button[class$="salesforceIdentityAppLauncherHeader"]'), "Verify the user is logged in successfully!").toBeVisible({ timeout: 50000 })
            await page.locator('button[class$="salesforceIdentityAppLauncherHeader"]').click({ timeout: 50000 })
            await page.getByText('View All').click()
            await page.locator('div.al-modal-container input[type="search"]').fill('Sales')
            await page.locator('div[data-name="Sales"] a').click()
            await page.locator('a[title="Campaigns"]').click()
            await page.locator('a.forceActionLink[title="New"]').click()
            await expect(page.locator('div.slds-clearfix.slds-card'), "New Campaign Information Window verification").toBeVisible()
            await page.locator('div[data-target-selection-name*="Campaign.Name"] input').fill('Playwright700' + Math.floor((Math.random() * 1000) + 1))
            await page.getByText('Conference').click()
            await page.waitForTimeout(1000)
            await page.locator('a[title="Referral Program"]').click()
            await page.locator('button[title="Save"]').click()
            await page.waitForTimeout(3000)
            await expect(page.locator('div[title*="View Campaign Hierarchy"]'), "Verify the New Campaign is created.").toContainText('Playwright700')
        })

        test('TC003 - Create a new account in Sales Force Application', async ({ page }) => {
            //Click on App Launcher and create a New Account
            page.goto('https://tata-a5-dev-ed.develop.lightning.force.com/lightning/setup/SetupOneHome/home')
            await page.waitForTimeout(3000)
            await expect(page.locator('button[class$="salesforceIdentityAppLauncherHeader"]'), "Verify the user is logged in successfully!").toBeVisible({ timeout: 50000 })
            await page.locator('button[class$="salesforceIdentityAppLauncherHeader"]').click({ timeout: 50000 })
            await page.getByText('View All').click()
            await page.locator('div.al-modal-container input[type="search"]').fill('Sales')
            await page.locator('div[data-name="Sales"] a').click()
            await page.locator('a[title="Accounts"]').click()
            await page.locator('a.forceActionLink[title="New"]').click()
            await expect(page.locator('div[data-target-selection-name*="Account.Name"] input'), "New Account Information Window verification").toBeVisible()
            await page.locator('div[data-target-selection-name*="Account.Name"] input').fill(accountName)
            await page.locator('button[name="SaveEdit"]').click()
            await page.waitForTimeout(3000)
            await expect(page.locator('div[class*="OutputNameWithHierarchy"]').nth(0), "Verify the New Account is created.").toContainText(accountName)
        })

        test('TC004 - Edit an account in Sales Force Application', async ({ page }) => {
            //Click on App Launcher and Edit an account - Add the Account Number
            page.goto('https://tata-a5-dev-ed.develop.lightning.force.com/lightning/setup/SetupOneHome/home')
            await page.waitForTimeout(3000)
            await expect(page.locator('button[class$="salesforceIdentityAppLauncherHeader"]'), "Verify the user is logged in successfully!").toBeVisible({ timeout: 50000 })
            await page.locator('button[class$="salesforceIdentityAppLauncherHeader"]').click({ timeout: 50000 })
            await page.getByText('View All').click()
            await page.locator('div.al-modal-container input[type="search"]').fill('Sales')
            await page.locator('div[data-name="Sales"] a').click()
            await page.locator('a[title="Accounts"]').click()
            await page.locator('input[name="Account-search-input"]').fill(accountName)
            await page.keyboard.press('Enter')
            await page.waitForTimeout(2000)
            await page.locator('a.rowActionsPlaceHolder').click()
            await page.locator('a[title="Edit"]').click()
            await page.locator('input[name="AccountNumber"]').fill("ACC001" + Math.floor((Math.random() * 1000) + 1))
            await page.locator('button[name="SaveEdit"]').click()
            await page.waitForTimeout(3000)
            // await expect(page.locator('div[class*="OutputNameWithHierarchy"]').nth(0), "Verify the New Account is created.").toContainText('Account01')
        })

        test('TC005 - Delete an account in Sales Force Application', async ({ page }) => {
            //Click on App Launcher and Delete an account
            page.goto('https://tata-a5-dev-ed.develop.lightning.force.com/lightning/setup/SetupOneHome/home')
            await page.waitForTimeout(3000)
            await expect(page.locator('button[class$="salesforceIdentityAppLauncherHeader"]'), "Verify the user is logged in successfully!").toBeVisible({ timeout: 50000 })
            await page.locator('button[class$="salesforceIdentityAppLauncherHeader"]').click({ timeout: 50000 })
            await page.getByText('View All').click()
            await page.locator('div.al-modal-container input[type="search"]').fill('Sales')
            await page.locator('div[data-name="Sales"] a').click()
            await page.locator('a[title="Accounts"]').click()
            await page.locator('input[name="Account-search-input"]').fill(accountName)
            await page.keyboard.press('Enter')
            await page.waitForTimeout(2000)
            await page.locator('a.rowActionsPlaceHolder').click()
            await page.locator('a[title="Delete"]').click()
            await expect(page.locator('div.modal-container'), "Verify the Delete Pop-up").toBeVisible()
            await page.locator('button[title="Delete"]').click()
            await page.waitForTimeout(3000)
            await expect(page.locator('div.emptyContentInner[role="status"]'), "Verify the Account is Deleted.").toContainText('No items to display.')
        })
    })
})